K1 = [4467.252670251459, 0, 451.51703715477;
 0, 4671.917515718876, 499.4603629472285;
 0, 0, 1];
R1 = [0.90035677, -0.015048588, 0.43489182;
 -0.05920532, 0.98587215, 0.15668705;
 -0.43110573, -0.16682217, 0.88674593];

K2 = [4439.111487187365, 0, 659.2426407603697;
 0, 4653.11499480279, 603.4733438224007;
 0, 0, 1];
R2 = [0.96034884, -0.013320856, 0.27848232;
 -0.040306933, 0.98173046, 0.18595868;
 -0.27587175, -0.18981001, 0.942267];

K3 = [4486.414333199992, 0, 1091.393181236934;
 0, 4687.823800403286, 558.5975451864092;
 0, 0, 1];
R3 = [0.98747694, -0.0082799848, 0.15754583;
 -0.021442555, 0.98231095, 0.18602562;
 -0.15629929, -0.18707421, 0.96983188];

K4 = [4684.193101135702, 0, 1150.843644720882;
 0, 4789.811568353549, 500.0620362938037;
 0, 0, 1];
R4 = [0.99931669, -0.0044434816, -0.036693335;
 0.010713774, 0.98495001, 0.17250681;
 0.035374567, -0.17278205, 0.98432469];

K5 = [4896.181880056344, 0, 1071.905496313111;
 0, 4907.892415797503, 464.4428151241761;
 0, 0, 1];
R5 = [0.96876627, 0.0033381199, -0.24795283;
 0.037696786, 0.98630571, 0.16056184;
 0.24509329, -0.16489397, 0.95537388];

K6 = [4516.23776267455, 0, -519.9939087930098;
 0, 4728.651942241102, 189.0103119733919;
 0, 0, 1];
R6 = [0.70742309, -0.016418569, -0.70659941;
 0.089191094, 0.99381196, 0.066202804;
 0.70113999, -0.10985577, 0.70451009];

K7 = [4484.78049307276, 0, 456.6934157251261;
 0, 4774.581446370718, 804.9782893267964;
 0, 0, 1];
R7 = [0.8971628, -0.035326976, 0.44028497;
 0.0076211849, 0.99788624, 0.064537451;
 -0.4416343, -0.054545112, 0.89553559];

K8 = [4499.600898871559, 0, 724.4338198314505;
 0, 4783.781355398099, 572.3034005892871;
 0, 0, 1];
R8 = [0.95609725, -0.011386484, 0.29282796;
 0.0060295267, 0.9997977, 0.019190006;
 -0.29298729, -0.016581912, 0.95597255];

K9 = [4569.75849439676, 0, 822.2612179760409;
 0, 4815.227823636636, 512.6233049031296;
 0, 0, 1];
R9 = [0.99381262, 0.0025353951, 0.11103965;
 -0.0035151658, 0.99995661, 0.008628659;
 -0.11101297, -0.008965604, 0.99377859];

K10 = [4706.332709784978, 0, 882.6385901224915;
 0, 4853.962431840125, 368.3776341623273;
 0, 0, 1];
R10 = [0.99690002, -0.0023737466, -0.078642502;
 0.0006352893, 0.99975502, -0.022123626;
 0.078675747, 0.022005077, 0.99665737];

K11 = [4838.067454765477, 0, 1110.946063497884;
 0, 4870.176803698911, 777.8059808346483;
 0, 0, 1];
R11 = [0.97048652, 0.028529665, -0.23946136;
 -0.01429578, 0.99803734, 0.060969308;
 0.24073079, -0.055746615, 0.96898973];

K12 = [5008.324448434408, 0, 721.6027339503726;
 0, 4957.350732707968, 503.8051965535379;
 0, 0, 1];
R12 = [0.8716386, 0.0043654144, -0.49012944;
 0.00043954048, 0.99995303, 0.0096878801;
 0.49014872, -0.008659767, 0.87159592];

K13 = [4528.377045925249, 0, 463.267391909078;
 0, 4853.273842547876, 550.3904889795987;
 0, 0, 1];
R13 = [0.89686608, -0.0033379728, 0.44228947;
 0.078295931, 0.98537761, -0.15133031;
 -0.43531704, 0.1703525, 0.88401312];

K14 = [4532.105996755574, 0, 802.652116663292;
 0, 4843.182404634527, 537.3696664211193;
 0, 0, 1];
R14 = [0.95022655, -0.0028740726, 0.31154636;
 0.055246815, 0.9856652, -0.15941161;
 -0.30662227, 0.1686891, 0.93676406];

K15 = [4628.026199288684, 0, 1058.945923172645;
 0, 4894.8900199973, 665.462666766083;
 0, 0, 1];
R15 = [0.9867993, -0.0013540946, 0.16194142;
 0.023791146, 0.99032789, -0.13669191;
 -0.16019003, 0.13874027, 0.97728729];

K16 = [4775.491696362562, 0, 645.8938340385744;
 0, 4966.995580033288, 468.9889073579743;
 0, 0, 1];
R16 = [0.99245918, -0.0076317182, -0.12233759;
 -0.014379737, 0.98391926, -0.17803442;
 0.12172902, 0.17845108, 0.97639];

K17 = [4809.435482714078, 0, 705.2388614416573;
 0, 4983.591707035109, 641.155266308176;
 0, 0, 1];
R17 = [0.94861865, 0.012374902, -0.31617957;
 -0.057154275, 0.98950046, -0.13274938;
 0.31121707, 0.14399956, 0.93936574];

K18 = [4842.030198510945, 0, 1287.540676111091;
 0, 5004.774214570224, 703.2175446503388;
 0, 0, 1];
R18 = [0.91922122, 0.02641619, -0.39285406;
 -0.077337801, 0.99042439, -0.11436135;
 0.38607126, 0.13550586, 0.91246217];

% construct H matrix: H = KRK^(-1), (true?)
% and try warping all images, see how the result look like

% Synthesize images, with colors
for i = 1:18
   eval(sprintf('img%d = imresize(imread(''mcam_%d_scale_2.jpg''),[920,1228]);',i,i));
end


% Warp the images
% Then show the result
for i = 1:18
    eval(sprintf('H%d = (K%d) * R%d * (K%d)^(-1);',i,i,i,i));
end


xMin = 0
xMax = 1000

yMin = 0
yMax = 1000

% Width and height of panorama.
width  = round(xMax - xMin);
height = round(yMax - yMin);
xLimits = [xMin xMax];
yLimits = [yMin yMax];
panoramaView = imref2d([height width], xLimits, yLimits);

T = projective2d(H1);
[I1w, RB1w] = imwarp(img1, T);

for i = 1:18
  %  eval(sprintf('T = projective2d(transpose(H%d));',i));
      eval(sprintf('T = projective2d(H%d'');',i));

  %  eval(sprintf('I = imwarp(''perspective'',H%d)',i));
%warpedImage = imwarp(img1, T, 'OutputView', panoramaView);\
  %  eval(sprintf('[I%d, RB%d] = imfuse(I%d,RB%d,I%d,RB%d,''blend'');',list(i+1),list(i+1),i,i,list(i),list(i)));
    eval(sprintf('[I%d, RB%d] = imwarp(img%d,T);',i,i,i));
    %figure;
    subplot(3,6,i);
    eval(sprintf('imshow(I%d)',i));
    eval(sprintf('X = RB%i.XWorldLimits; Y = RB%i.YWorldLimits',i,i));
    title([num2str(Y(1))]);
end

%[I12,RB12] = imfuse(I1,RB1,I2,RB2, 'blend');
%list = [1,12,123,1234,12345,123456,12345678,123456789,12345678910,1234567891011,1234567891012,1234567891013,1234567891014,1234567891015];
%for i = 2:14
%    eval(sprintf('[I%d,RB%d] = imfuse(I%d,RB%d,I%d,RB%d,''blend'');',list(i+1),list(i+1),i,i,list(i),list(i)));
%end


%corners = [478, 2204, 393, 290;
 %          185, 2221, 390, 281;
 %         -114, 2242, 379, 270;
 %          -391, 2237, 364, 269;
 %          -654, 2227, 355, 271;
 %          -937, 2199, 369, 274;
 %          485, 2008, 373, 263;
 %          187, 2012, 372, 263;
 %          -91, 2015, 364, 261;
 %          -361, 2015, 354, 259;
 %          -640, 2015, 343, 259;
 %          -896, 2023, 333, 254;
 %          487, 1778, 393, 286;
 %          193, 1771, 386, 274;
 %          -87, 1775, 367, 259;
 %          -362, 1774, 361, 258;
 %          -658, 1785, 367, 271;
 %          -932, 1803, 364, 279];
 
corners = [1464, 7819, 1378, 1018;
           463, 7884, 1341, 976;
           -551, 7958, 1281, 930;
           -1476, 7936, 1224, 929;
           -2357, 7896, 1196, 935;
           -3248, 7803, 1192, 947;
           1491, 7129, 1298, 928;
           458, 7153, 1286, 922;
           -468, 7166, 1224, 912;
           -1367, 7176, 1181, 887;
           -2302, 7172, 1149, 888;
           -3161, 7185, 1129, 880;
           1493, 6309, 1371, 1010;
           475, 6301, 1325, 960;
           -493, 6317, 1261, 918;
           -1388, 6326, 1193, 902;
           -2348, 6382, 1188, 925;
           -3257, 6428, 1201, 957]
 
 corners(:,2) = corners(:,2) - 6300;
 corners(:,1) = corners(:,1) + 3258;
 
%  
%  corners(1,3) = ceil(corners(1,3) * 1.25);
%  corners(1,4) = ceil(corners(1,4) * 1.25);
% 
%  corners(6,3) = ceil(corners(6,3) * 1.25);
%  corners(6,4) = ceil(corners(6,4) * 1.25);
% 
%  corners(7,3) = ceil(corners(7,3) * 1.25);
%  corners(7,4) = ceil(corners(7,4) * 1.25);
% 
%  corners(12,3) = ceil(corners(12,3) * 1.25);
%  corners(12,4) = ceil(corners(12,4) * 1.25);
% 
%  corners(13,3) = ceil(corners(13,3) * 1.25);
%  corners(13,4) = ceil(corners(13,4) * 1.25);
% 
%  corners(18,3) = ceil(corners(18,3) * 1.25);
%  corners(18,4) = ceil(corners(18,4) * 1.25);
% 
%  corners(2,3) = ceil(corners(2,3) * 1.1);
%  corners(2,4) = ceil(corners(2,4) * 1.1);
% 
%  corners(5,3) = ceil(corners(5,3) * 1.1);
%  corners(5,4) = ceil(corners(5,4) * 1.1);
% 
%  corners(8,3) = ceil(corners(8,3) * 1.1);
%  corners(8,4) = ceil(corners(8,4) * 1.1);
% 
%  corners(11,3) = ceil(corners(11,3) * 1.1);
%  corners(11,4) = ceil(corners(11,4) * 1.1);
% 
%  corners(14,3) = ceil(corners(14,3) * 1.1);
%  corners(14,4) = ceil(corners(14,4) * 1.1);
%  
%  corners(17,3) = ceil(corners(17,3) * 1.1);
%  corners(17,4) = ceil(corners(17,4) * 1.1);
%  
%   corners(13,2) = ceil(corners(13,2) - corners(13,4) * 0.12)
%   corners(18,2) = ceil(corners(18,2) - corners(18,4) * 0.12)
%   corners(17,2) = ceil(corners(17,2) - corners(17,4) * 0.05)
%   corners(14,2) = ceil(corners(14,2) - corners(14,4) * 0.05)
%  corners(:,2) = corners(:,2) + 91
  

figure;
hold on 
for i = 1:18
    rectangle('Position', corners(i,:));
end
hold off

%result = uint8(zeros(938, 2513,3));
result = uint8(zeros(2588, 6122,3));

for i = 1:18
 %   Is1 = imresize(I1, [corners(i,4), corners(i,3)]);
  %  result(corners(i,2):corners(i,2)+corners(i,4)-1, corners(i,1):corners(i,1)+corners(i,3)-1,:) = Is1;
 %   if i == 1 || i == 6 || i == 7 || i == 12 || i == 13 || i == 18 
  %      eval(sprintf('Is%d = imresize(I%d, [corners(i,4), corners(i,3)]);',i,i));
 %   elseif i == 2 || i == 5 || i == 8 || i == 11 || i == 14 || i == 17 
  %      eval(sprintf('Is%d = imresize(I%d, [corners(i,4), corners(i,3)]);',i,i));
 %   else
         eval(sprintf('Is%d = imresize(I%d, [corners(i,4), corners(i,3)]);',i,i));
 %   end
   eval(sprintf('result(corners(i,2):corners(i,2)+corners(i,4)-1, corners(i,1):corners(i,1)+corners(i,3)-1,:) = result(corners(i,2):corners(i,2)+corners(i,4)-1, corners(i,1):corners(i,1)+corners(i,3)-1,:) +Is%d;',i));
end


