% this is a playpen stuff for the makeSaccadeConfig3.py 

% we want to know, how to compute the roll-pitch-yaw from the center 

K1 = [3274.371753498689, 0, 493.012199518308;
 0, 3449.325958845297, 264.947660436863;
 0, 0, 1];
R1 = [0.83260232, -0.019762889, 0.55351853;
 -0.048825666, 0.99285376, 0.10889252;
 -0.5517149, -0.11769008, 0.82568741];
K2 = [3283.009090594701, 0, 505.6283771334478;
 0, 3450.653623474587, 415.5021870011893;
 0, 0, 1];
R2 = [0.92903668, -0.029306898, 0.36882505;
 -0.032080103, 0.98672312, 0.15921205;
 -0.36859417, -0.15974575, 0.91576177];
K3 = [3346.01932487007, 0, 841.7744281935452;
 0, 3477.594863446861, 392.8648914366403;
 0, 0, 1];
R3 = [0.96557373, -0.024759892, 0.25894856;
 -0.017936984, 0.98675323, 0.16123429;
 -0.2595104, -0.16032833, 0.95233876];
K4 = [3504.873245293055, 0, 857.0268061574113;
 0, 3552.761934978605, 400.0926291003752;
 0, 0, 1];
R4 = [0.99778223, -0.021020213, 0.063157544;
 0.010562188, 0.9868055, 0.16156578;
 -0.06572035, -0.16054037, 0.98483884];
K5 = [3663.925196567586, 0, 829.3804630946103;
 0, 3639.550902076714, 382.5550249045929;
 0, 0, 1];
R5 = [0.990569, -0.012156032, -0.13647452;
 0.033163838, 0.98771065, 0.15273494;
 0.13294066, -0.1558205, 0.97879857];
K6 = [3640.948065874733, 0, -6.075880282095882;
 0, 3639.466819509074, 176.5706663982676;
 0, 0, 1];
R6 = [0.85118854, -0.024983734, -0.52426523;
 0.072742119, 0.99484217, 0.07069394;
 0.51979494, -0.098310016, 0.84861553];
K7 = [3274.520899363306, 0, 487.798618589976;
 0, 3486.773825562255, 394.6234347062924;
 0, 0, 1];
R7 = [0.82959461, -0.012268368, 0.55823147;
 0.018553618, 0.99981219, -0.0055996776;
 -0.55805784, 0.015002683, 0.82966632];
K8 = [3343.986517963801, 0, 705.8463145254321;
 0, 3512.812049679732, 373.9167309040359;
 0, 0, 1];
R8 = [0.90472007, -0.0045238826, 0.42598262;
 0.0095945746, 0.99990636, -0.0097584948;
 -0.42589855, 0.012915812, 0.9046787];
K9 = [3429.439771223235, 0, 522.1145904429487;
 0, 3531.141621900665, 417.4370272278605;
 0, 0, 1];
R9 = [0.9831351, 0.0033284652, 0.18285036;
 -0.0041537229, 0.99998283, 0.0041304976;
 -0.18283346, -0.0048203394, 0.983132];
K10 = [3500.204425418042, 0, 569.6392020109541;
 0, 3546.866404001399, 406.6612491400594;
 0, 0, 1];
R10 = [1, 0, 0;
 0, 1, 0;
 -3.7252903e-09, -7.4505806e-09, 1];
K11 = [3564.145896083547, 0, 1038.28045923203;
 0, 3563.304938424523, 520.5899754612145;
 0, 0, 1];
R11 = [0.99699479, 0.015674507, -0.075866528;
 -0.013414725, 0.99945372, 0.030204833;
 0.076298535, -0.029096328, 0.99666035];
K12 = [3758.919091255191, 0, 353.6801964802179;
 0, 3649.288076184293, 200.2885730663949;
 0, 0, 1];
R12 = [0.90141404, -0.016634034, -0.4326385;
 -0.0064534135, 0.99863452, -0.051841255;
 0.43291003, 0.049522433, 0.90007573];
K13 = [3255.126294350611, 0, 360.8853331959938;
 0, 3475.825222895441, 351.2171271108331;
 0, 0, 1];
R13 = [0.85197103, 0.023094729, 0.52307934;
 0.085206807, 0.97959393, -0.18203202;
 -0.51660925, 0.19965589, 0.83261776];
K14 = [3261.084904837336, 0, 680.6057253459197;
 0, 3475.053305321173, 395.8135790501386;
 0, 0, 1];
R14 = [0.90888113, 0.016582839, 0.41672558;
 0.06201997, 0.98272485, -0.17437172;
 -0.41241807, 0.18432847, 0.89215147];
K15 = [3357.509016762102, 0, 951.1317044686832;
 0, 3528.361209881413, 397.4525602979513;
 0, 0, 1];
R15 = [95546591, 0.021878285, 0.29428938;
 0.032101344, 0.98362446, -0.17734841;
 -0.29335028, 0.17889744, 0.93911725];
K16 = [3565.952343318186, 0, 977.3515911419896;
 0, 3634.117923553946, 471.5713785605321;
 0, 0, 1];
R16 = [0.994277, 0.015645683, 0.10568103;
 0.0015788106, 0.98695815, -0.16096935;
 -0.10682122, 0.16021498, 0.98128504];
K17 = [3705.317184897976, 0, 170.96302729602;
 0, 3693.689792068587, 424.9599153319062;
 0, 0, 1];
R17 = [0.95066601, 0.026604984, -0.30907333;
 -0.07751327, 0.98508447, -0.153624;
 0.30037615, 0.17000239, 0.93854851];
K18 = [3687.654771125811, 0, 716.6950972194147;
 0, 3683.261120479816, 557.7551218087481;
 0, 0, 1];
R18 = [0.93535024, 0.0467427, -0.3506209;
 -0.091772631, 0.9893561, -0.1129265;
 0.34161037, 0.13780323, 0.92968416];

% construct H matrix: H = KRK^(-1), (true?)
% and try warping all images, see how the result look like 

% Synthesize images, with colors
for i = 1:18
   eval(sprintf('img%d = imresize(imread(''mcam_%d_scale_2.jpg''),[920,1228]);',i,i));
end

% Warp the images
% Then show the result
for i = 1:18
    eval(sprintf('H%d = (K%d) * R%d * (K%d)^(-1);',i,i,i,i));
   % eval(sprintf('H%d = K%d * R%d;',i,i,i));
end

% compute the euler angels between 10 and 11, 10 and 9
%eul8 = rotm2eul(R8)
eul9 = rotm2eul(R9)
eul10 = rotm2eul(R10)
eul11 = rotm2eul(R11)
eul4 = rotm2eul(R4)
eul16 = rotm2eul(R16)

tanleft = tan(eul11(2));
tanright = tan(eul9(2));
tanup = tan(eul16(3));
tandown = tan(eul4(3));

% based on these values (10, 4, 9, 11, 16), compute other euls... 
eul1 = [eul10(1), atan(4*(tanright)), atan(tandown)];
eul2 = [eul10(1), atan(2*(tanright)), atan(tandown)];
eul3 = [eul10(1), atan((tanright)), atan(tandown)];
eul5 = [eul10(1), atan(tanleft), atan(tandown)];
eul6 = [eul10(1), atan(2*(tanleft)), atan(tandown)];
eul7 = [eul10(1), atan(4*(tanright)), eul10(3)];
eul8 = [eul10(1), atan(2*(tanright)), eul10(3)];
eul12 = [eul10(1), atan(2*(tanleft)), eul10(3)];
eul13 = [eul10(1), atan(4*(tanright)), atan(tanup)];
eul14 = [eul10(1), atan(2*(tanright)), atan(tanup)];
eul15 = [eul10(1), atan(tanright), atan(tanup)];
eul17 = [eul10(1), atan(tanleft), atan(tanup)];
eul18 = [eul10(1), atan(2*(tanleft)), atan(tanup)];

xMin = 0
xMax = 1000

yMin = 0
yMax = 1000

R1 = eul2rotm(eul1);
R2 = eul2rotm(eul2);
R3 = eul2rotm(eul3);
R5 = eul2rotm(eul5);
R6 = eul2rotm(eul6);
R7 = eul2rotm(eul7);
R8 = eul2rotm(eul8);
R12 = eul2rotm(eul12);
R13 = eul2rotm(eul13);
R14 = eul2rotm(eul14);
R15 = eul2rotm(eul15);
R17 = eul2rotm(eul17);
R18 = eul2rotm(eul18);
% 
% for i = 1:18
%     eval(sprintf('H%d = K%d * R%d * (K%d)^(-1);',i,i,i,i));
% end

%Width and height of panorama.
width  = round(xMax - xMin);
height = round(yMax - yMin);
xLimits = [xMin xMax];
yLimits = [yMin yMax];
panoramaView = imref2d([height width], xLimits, yLimits);

for i = 1:14
  %  eval(sprintf('T = projective2d(transpose(H%d));',i));
      eval(sprintf('T = projective2d(H%d);',i));

  %  eval(sprintf('I = imwarp(''perspective'',H%d)',i));
%warpedImage = imwarp(img1, T, 'OutputView', panoramaView);\
    eval(sprintf('[I%d, RB%d]=imwarp(img%d,T);',i,i,i));
    %figure;
    subplot(3,6,i);
    eval(sprintf('imshow(I%d)',i));
    eval(sprintf('X = RB%i.XWorldLimits; Y = RB%i.YWorldLimits',i,i));
    title([num2str(Y(1))]);
end

[I12,RB12] = imfuse(I1,RB1,I2,RB2, 'blend');
list = [1,12,123,1234,12345,123456,1234567, 12345678,123456789,12345678910,1234567891011,1234567891012,1234567891013,1234567891014,1234567891015,1234567891016,1234567891017,1234567891018];
for i = 2:17
    eval(sprintf('[I%d,RB%d] = imfuse(I%d,RB%d,I%d,RB%d,''blend'');',list(i+1),list(i+1),i,i,list(i),list(i)));
end

